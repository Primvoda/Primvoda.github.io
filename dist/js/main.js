document.addEventListener("DOMContentLoaded", () => {
  console.log("DOM –∑–∞–≥—Ä—É–∂–µ–Ω");

  let map; // –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
  let heatmapLayer; // –¢–µ–∫—É—â–∏–π —Å–ª–æ–π —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  let heatmapData = []; // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
  let markerData = []; // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã)
  const threshold = 80; // –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  function extractDataFromImage(image) {
    console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä:", image.width, "x", image.height);

    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    canvas.width = image.width;
    canvas.height = image.height;
    ctx.drawImage(image, 0, 0);

    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;

    console.log("–î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", data);

    let byteArray = [];
    for (let i = 0; i < data.length; i += 4) {
      byteArray.push(data[i], data[i + 1], data[i + 2]);
    }

    byteArray = byteArray.filter(byte => byte !== 0);
    console.log("–ë–∞–π—Ç—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", byteArray);

    const decoder = new TextDecoder("utf-8");
    const encodedData = decoder.decode(new Uint8Array(byteArray));
    console.log("–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", encodedData);

    try {
      const decodedData = atob(encodedData);
      console.log("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", decodedData);

      const coordinates = JSON.parse(decodedData);
      console.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", coordinates);

      // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É
      const minDepth = Math.min(...coordinates.map(well => well.depth));
      const maxDepth = Math.max(...coordinates.map(well => well.depth));

      // –°–∫—Ä—ã–≤–∞–µ–º canvas –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      canvas.style.display = "none";

      return coordinates;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      return [];
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
  function initMap(heatmapData, markerData) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∏–¥ –∫–∞—Ä—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑—É–º
    map = L.map("map", {
      zoomControl: true, // –í–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑—É–º–æ–º
      minZoom: 9, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
      maxZoom: 16 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
    }).setView([43.35, 132.19], 9); // –ù–∞—á–∞–ª—å–Ω—ã–π –∑—É–º –∏ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã

    console.log("–ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:", map);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
    L.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png", {
      attribution: '¬© OpenStreetMap contributors',
    }).addTo(map);

    // –°–æ–∑–¥–∞—ë–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∑–µ–ª—ë–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    createHeatmap(heatmapData);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å –≥–ª—É–±–∏–Ω–æ–π –ø—Ä–∏ –∑—É–º–µ 16
    addDepthMarkers(markerData);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    addLocationButton();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  function createHeatmap(data) {
    if (heatmapLayer) {
      map.removeLayer(heatmapLayer); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    }

    if (data.length > 0) {
      heatmapLayer = L.heatLayer(data, {
        radius: 50,  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å
        blur: 30,    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ
        maxZoom: 18,
        gradient: {
          0.1: 'rgba(173, 255, 47, 1)',   // –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π (GreenYellow)
          0.3: 'rgba(50, 205, 50, 1)',    // –õ–∞–π–º–æ–≤—ã–π (LimeGreen)
          0.5: 'rgba(34, 139, 34, 1)',    // –õ–µ—Å–Ω–æ–π –∑–µ–ª—ë–Ω—ã–π (ForestGreen)
          0.7: 'rgba(0, 100, 0, 1)',      // –¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π (DarkGreen)
          1.0: 'rgba(0, 50, 0, 1)'        // –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π
        }
      }).addTo(map);

      console.log("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:", heatmapLayer);
    } else {
      console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã");
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –≥–ª—É–±–∏–Ω–æ–π –ø—Ä–∏ –∑—É–º–µ 16
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –≥–ª—É–±–∏–Ω–æ–π –ø—Ä–∏ –∑—É–º–µ 16
function addDepthMarkers(markerData) {
  const markers = L.layerGroup(); // –ì—Ä—É–ø–ø–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤

  // –¶–≤–µ—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ç–µ –∂–µ, —á—Ç–æ –∏ –≤ –ª–µ–≥–µ–Ω–¥–µ)
  const depthColors = [
    "#A6D5E8", // –î–æ 20 –º
    "#6BB9E8", // 20‚Äì40 –º
    "#3A89C9", // 40‚Äì60 –º
    "#1E5A8A", // 60‚Äì80 –º
    "#0A2E4E"  // –°–≤—ã—à–µ 80 –º
  ];

  markerData.forEach(well => {
    const [lat, lng, depth] = well;

    // –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω—É—é
    const realDepth = depth * threshold;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª—É–±–∏–Ω—ã
    let color;
    if (realDepth < 20) {
      color = depthColors[0]; // –î–æ 20 –º
    } else if (realDepth < 40) {
      color = depthColors[1]; // 20‚Äì40 –º
    } else if (realDepth < 60) {
      color = depthColors[2]; // 40‚Äì60 –º
    } else if (realDepth < 80) {
      color = depthColors[3]; // 60‚Äì80 –º
    } else {
      color = depthColors[4]; // –°–≤—ã—à–µ 80 –º
    }

    // –°–æ–∑–¥–∞—ë–º –∫—Ä—É–≥ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    const circle = L.circle([lat, lng], {
      radius: 50, // –†–∞–¥–∏—É—Å –∫—Ä—É–≥–∞
      fillColor: color,
      fillOpacity: 0.8, // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏
      color: "#000", // –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
      weight: 0 // –¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ –≤ –≥—Ä—É–ø–ø—É
    markers.addLayer(circle);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑—É–º–µ 16
  map.on('zoomend', () => {
    if (map.getZoom() === 16) {
      map.addLayer(markers);
    } else {
      map.removeLayer(markers);
    }
  });
}

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  function addLocationButton() {
    const locationButton = L.control({ position: 'topright' });

    locationButton.onAdd = function () {
      const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
      const button = L.DomUtil.create('button', 'leaflet-control-locate');
      button.innerHTML = 'üìç'; // –ò–∫–æ–Ω–∫–∞ –∫–Ω–æ–ø–∫–∏
      button.title = '–ù–∞–π—Ç–∏ –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
      button.style.fontSize = '20px';
      button.style.cursor = 'pointer';
      button.style.border = 'none';
      button.style.background = 'white';
      button.style.padding = '5px 10px';
      button.style.borderRadius = '4px';

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
      button.onclick = () => {
        map.locate({ setView: true, maxZoom: 16, enableHighAccuracy: true });
      };

      div.appendChild(button);
      return div;
    };

    locationButton.addTo(map);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    map.on('locationfound', (e) => {
      console.log("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:", e.latlng);
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
      map.setView(e.latlng, 16);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    map.on('locationerror', (e) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", e.message);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.");
    });
  }

  const image = document.getElementById("data-image");

  if (image.complete) {
    console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
    const coordinates = extractDataFromImage(image);

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å 0.8)
    heatmapData = coordinates.map(well => [well.lat, well.lng, 0.8]);

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã)
    markerData = coordinates.map(well => [well.lat, well.lng, well.depth]);

    initMap(heatmapData, markerData);
  } else {
    console.log("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    image.onload = () => {
      console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", image);
      const coordinates = extractDataFromImage(image);

      // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å 0.8)
      heatmapData = coordinates.map(well => [well.lat, well.lng, 0.8]);

      // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã)
      markerData = coordinates.map(well => [well.lat, well.lng, well.depth]);

      initMap(heatmapData, markerData);
    };
  }

  image.onerror = () => {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
  };
});